<?php

/**
 * @file
 * Drupal integration with Font Awesome, the iconic font for use with Bootstrap.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\editor\Entity\Editor;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_help().
 */
function fontawesome_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.fontawesome':
      return '<p><i class="far fa-font-awesome fa-2x"></i> ' . t('<a href=":fontawesome_url">Font Awesome</a> is an iconic font and CSS toolkit. Font Awesome gives you scalable vector icons that can instantly be customized â€” size, color, drop shadow, and anything that can be done with the power of CSS. For more information on how to use Font Awesome, see the <a href=":fontawesome_examples_page">Font Awesome Examples page</a>.', [
        ':fontawesome_url' => 'http://fontawesome.io',
        ':fontawesome_examples_page' => 'http://fontawesome.io/examples/',
      ]) . '</p>';
  }
}

/**
 * Implements hook_library_info_alter().
 */
function fontawesome_library_info_alter(&$libraries, $extension) {
  // Modify the Font Awesome library to use external file if user chose.
  if ($extension == 'fontawesome' && isset($libraries['fontawesome.svg'])) {
    // Load the configuration settings.
    $configuration_settings = \Drupal::config('fontawesome.settings');

    // Have to modify the library if the user is using a CDN.
    if ($configuration_settings->get('use_cdn')) {
      // Modify the library.
      $librarySettings = array_shift($libraries['fontawesome.svg']['js']);
      $libraries['fontawesome.svg']['js'] = [
        $configuration_settings->get('external_svg_location') => $librarySettings,
      ];

      // Modify the shim as well.
      if ($configuration_settings->get('use_shim')) {
        $librarySettings = array_shift($libraries['fontawesome.svg.shim']['js']);
        $libraries['fontawesome.svg.shim']['js'] = [
          $configuration_settings->get('external_shim_location') => $librarySettings,
        ];
      }
    }
  }
}

/**
 * Implements hook_ckeditor_css_alter().
 *
 * This function allows for the proper functionality of the icons inside the
 * CKEditor when using Webfonts with CSS as the Font Awesome display method.
 *
 * See fontawesome_editor_js_settings_alter() for allowing the use of the icons
 * inside CKEditor when using the SVG with JS display method.
 */
function fontawesome_ckeditor_css_alter(&$css, $editor) {
  // Attach the main library if we're using the CSS webfonts method..
  if (\Drupal::config('fontawesome.settings')->get('method') == 'webfonts') {
    // Load the library.
    $fontawesome_library = \Drupal::service('library.discovery')->getLibraryByName('fontawesome', 'fontawesome.webfonts');
    // Attach it's CSS.
    $css[] = $fontawesome_library['css'][0]['data'];
  }
}

/**
 * Check to make sure that Font Awesome is installed.
 *
 * @return bool
 *   Flag indicating if the library is properly installed.
 */
function fontawesome_check_installed() {
  // Load the configuration settings.
  $configuration_settings = \Drupal::config('fontawesome.settings');

  // Throw error if library file not found.
  if ($configuration_settings->get('use_cdn')) {
    return !empty($configuration_settings->get('external_svg_location'));
  }
  else {
    if ($configuration_settings->get('method') == 'webfonts') {
      // Webfonts method.
      $fontawesome_library = \Drupal::service('library.discovery')->getLibraryByName('fontawesome', 'fontawesome.webfonts');
      return file_exists(DRUPAL_ROOT . '/' . $fontawesome_library['css'][0]['data']);
    }
    else {
      // SVG method.
      $fontawesome_library = \Drupal::service('library.discovery')->getLibraryByName('fontawesome', 'fontawesome.svg');
      return file_exists(DRUPAL_ROOT . '/' . $fontawesome_library['js'][0]['data']);
    }
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Purposefully only load on page requests and not hook_init(). This is
 * required so it does not increase the bootstrap time of Drupal when it isn't
 * necessary.
 */
function fontawesome_page_attachments(array &$page) {
  // Load the configuration settings.
  $configuration_settings = \Drupal::config('fontawesome.settings');

  // Throw error if library file not found.
  if (!fontawesome_check_installed()) {
    drupal_set_message(t('The Font Awesome library could not be found. Please verify Font Awesome is installed correctly or that the CDN has been activated. Please see the @adminPage and the Font Awesome module README file for more details.', [
      '@adminPage' => Link::FromTextAndUrl(t('admin page'), Url::fromRoute('fontawesome.admin_settings'))->toString(),
    ]), 'warning');
    return;
  }

  // Attach the main library.
  if ($configuration_settings->get('method') == 'webfonts') {
    // Webfonts method.
    $page['#attached']['library'][] = 'fontawesome/fontawesome.webfonts';
  }
  else {
    // SVG method.
    $page['#attached']['library'][] = 'fontawesome/fontawesome.svg';

    // Attach the shim file if needed.
    if ($configuration_settings->get('use_shim')) {
      $page['#attached']['library'][] = 'fontawesome/fontawesome.svg.shim';
    }
  }
}

/**
 * Implements hook_icon_providers().
 */
function fontawesome_icon_providers() {
  $providers['fontawesome'] = [
    'title' => 'Font Awesome',
    'url' => 'http://fontawesome.io',
  ];
  return $providers;
}

/**
 * Implements hook_icon_bundle_configure().
 */
function fontawesome_icon_bundle_configure(&$settings, &$form_state, &$complete_form) {
  $bundle = $form_state['bundle'];
  if ($bundle['provider'] === 'fontawesome') {
    $settings['tag'] = [
      '#type' => 'select',
      '#title' => t('HTML Markup'),
      '#description' => t('Choose the HTML markup tag that Font Awesome icons should be created with. Typically, this is a %tag tag, however it can be changed to suite the theme requirements.', [
        '%tag' => '<' . $bundle['settings']['tag'] . '>',
      ]),
      '#options' => array_combine(
        ['i', 'span'],
        ['i', 'span']
      ),
      '#default_value' => $bundle['settings']['tag'],
    ];
  }
}

/**
 * Implements hook_preprocess_icon_RENDER_HOOK().
 */
function fontawesome_preprocess_icon_sprite(&$variables) {
  $bundle = &$variables['bundle'];
  if ($bundle['provider'] === 'fontawesome') {
    // Remove the default "icon" class.
    $key = array_search('icon', $variables['attributes']['class']);
    if ($key !== FALSE) {
      unset($variables['attributes']['class'][$key]);
    }

    // TODO: need to add the correct class depending on icon type.
    // Add the necessary FA identifier class.
    $variables['attributes']['class'][] = 'fas';

    // Prepend the icon with the FA prefix (which will be used as the class).
    $variables['icon'] = 'fa-' . $variables['icon'];
  }
}

/**
 * Implements hook_icon_bundles().
 *
 * TODO: this is waiting on an 8.x release of Icon API.
 */
function fontawesome_icon_bundles() {
  $bundles['fontawesome'] = [
    'title' => 'Font Awesome',
    'provider' => 'fontawesome',
    'render' => 'sprite',
    'settings' => [
      'tag' => 'i',
    ],
    'icons' => fontawesome_extract_icons(),
  ];
  return $bundles;
}

/**
 * Provides a list of all available Font Awesome icons from metadata.
 *
 * @return array
 *   Array containing icons.
 */
function fontawesome_extract_icons() {
  $icons = [];

  // Attempt to load the icons from the local library's metadata if possible.
  $metadataFile = drupal_realpath(DRUPAL_ROOT . '/libraries/fontawesome/advanced-options/metadata/icons.yml');
  // If we can't load the local file, use the included module icons file.
  if (!file_exists($metadataFile)) {
    $metadataFile = drupal_get_path('module', 'fontawesome') . '/metadata/icons.yml';
  }

  // Parse the metadata file and use it to generate the icon list.
  foreach (Yaml::parse(file_get_contents($metadataFile)) as $name => $icon) {
    // Determine the icon type - brands behave differently.
    $type = 'solid';
    foreach ($icon['styles'] as $style) {
      if ($style == 'brands') {
        $type = 'brands';
        break;
      }
    }
    $icons[$name] = [
      'name' => $name,
      'type' => $type,
      'label' => $icon['label'],
      'styles' => $icon['styles'],
    ];
  }

  return $icons;
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function fontawesome_editor_js_settings_alter(array &$settings) {

  $editors = Editor::loadMultiple();

  /* @var Drupal\editor\Entity\Editor $editor */
  foreach ($editors as $editor) {
    // Add custom settings to editor to allow for empty tags.
    $editor_id = $editor->id();
    $settings['editor']['formats'][$editor_id]['editorSettings']['customConfig'] = base_path() . drupal_get_path('module', 'fontawesome') . '/js/allowEmptyTags.config.js';

    // Attach the list of allowed empty tags.
    $settings['editor']['formats']['allowedEmptyTags'] = ['i', 'span'];
  }
}
