<?php

/**
 * @file
 * Drupal integration with Font Awesome 5.
 */

define('FONTAWESOME_LIBRARY', 'fontawesome');
define('FONTAWESOME_NAME', 'Font Awesome');
define('FONTAWESOME_URL', 'https://fontawesome.com/');
define('FONTAWESOME_CDN_CSS_URL', 'https://use.fontawesome.com/releases/v5.1.0/css/all.css');
define('FONTAWESOME_CDN_SVG_URL', 'https://use.fontawesome.com/releases/v5.1.0/js/all.js');
define('FONTAWESOME_CDN_SHIM_URL', 'https://use.fontawesome.com/releases/v5.1.0/js/v4-shims.js');
define('FONTAWESOME_DOWNLOAD_URL', 'https://use.fontawesome.com/releases/v5.1.0/fontawesome-free-5.1.0-web.zip');
define('FONTAWESOME_PREFIX', 'fa');

/**
 * Implements hook_menu().
 */
function fontawesome_menu() {
  $items['admin/config/content/fontawesome'] = array(
    'title' => 'Font Awesome settings',
    'description' => 'Configure Font Awesome.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fontawesome_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'fontawesome.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function fontawesome_help($path, $arg) {
  switch ($path) {
    case 'admin/help#fontawesome':
      return '<p><i class="icon-flag icon-large"></i>' . t('<a href="!fontawesome_url">Font Awesome</a> is an iconic font and CSS toolkit. Font Awesome gives you scalable vector icons that can instantly be customized â€” size, color, drop shadow, and anything that can be done with the power of CSS. For more information on how to use Font Awesome, see the <a href="!fontawesome_examples_page">Font Awesome Examples page</a>.', array(
        '!fontawesome_url' => FONTAWESOME_URL,
        '!fontawesome_examples_page' => FONTAWESOME_URL . '/how-to-use/svg-with-js',
      )) . '</p>';
  }
}

/**
 * Implements hook_libraries_info().
 */
function fontawesome_libraries_info() {
  // @TODO: Font Awesome Pro

  // Shared core library data.
  $library_core = array(
    'name' => FONTAWESOME_NAME,
    'vendor url' => FONTAWESOME_URL,
    'download url' => FONTAWESOME_DOWNLOAD_URL,
    'cdn url' => array(
      'webfonts' => FONTAWESOME_CDN_CSS_URL,
      'svg' => FONTAWESOME_CDN_SVG_URL,
      'shim' => FONTAWESOME_CDN_SHIM_URL,
    ),
    'version arguments' => array(
      'file' => 'README.md',
      'pattern' => '/# Font Awesome ([0-9\.]+)/',
      'lines' => 1,
    ),
  );

  // SVG wtih JS library.
  $libraries[FONTAWESOME_LIBRARY . '_svg'] = $library_core;
  $libraries[FONTAWESOME_LIBRARY . '_svg']['machine name'] = FONTAWESOME_LIBRARY;
  $libraries[FONTAWESOME_LIBRARY . '_svg']['files'] = array(
    'js' => array(
      'js/all.js',
    ),
  );

  // SVG wtih JS shim library.
  $libraries[FONTAWESOME_LIBRARY . '_shim'] = $library_core;
  $libraries[FONTAWESOME_LIBRARY . '_shim']['machine name'] = FONTAWESOME_LIBRARY;
  $libraries[FONTAWESOME_LIBRARY . '_shim']['files'] = array(
    'js' => array(
      'js/v4-shims.js',
    ),
  );

  // Webfonts with CSS library.
  $libraries[FONTAWESOME_LIBRARY . '_webfonts'] = $library_core;
  $libraries[FONTAWESOME_LIBRARY . '_webfonts']['machine name'] = FONTAWESOME_LIBRARY;
  $libraries[FONTAWESOME_LIBRARY . '_webfonts']['files'] = array(
    'css' => array(
      'css/all.css',
    ),
  );

  return $libraries;
}

/**
 * Implements hook_preprocess_html().
 *
 * Purposefully only load on page requests and not hook_init(). This is
 * required so it does not increase the bootstrap time of Drupal when it isn't
 * necessary.
 */
function fontawesome_preprocess_html() {
  // Get module settings.
  $method = variable_get('fontawesome_method', 'svg');
  $external_settings = variable_get('fontawesome_external', array(
    'use_cdn' => TRUE,
    'external_location' => '',
  ));
  $shim_settings = variable_get('fontawesome_shim', array(
    'use_shim' => FALSE,
    'external_location' => '',
  ));

  // Check if we need to load the pseudoelements JS.
  // Handle loading CSS pseudo-elements in SVG mode.
  if ($method == 'svg' && variable_get('fontawesome_allow_pseudo_elements', FALSE)) {
    drupal_add_js('/' . drupal_get_path('module', 'fontawesome') . '/js/enablePseudoElements.js', array(
      'type' => 'external',
      'scope' => 'header',
      'group' => JS_LIBRARY,
      'every_page' => TRUE,
      'weight' => -10,
    ));
  }

  // Check if we are using the CDN.
  if ($external_settings['use_cdn']) {
    // Webfonts.
    if ($method == 'webfonts') {
      // Load the file.
      drupal_add_css($external_settings['external_location'], array(
        'type' => 'external',
        'group' => CSS_THEME,
        'every_page' => TRUE,
      ));
    }
    // SVG with JS.
    elseif ($method == 'svg') {
      // Load the file.
      drupal_add_js($external_settings['external_location'], array(
        'type' => 'external',
        'scope' => 'footer',
        'group' => JS_THEME,
        'every_page' => TRUE,
        'weight' => 10,
      ));
      // Handle backwards compatibility shim file.
      if ($shim_settings['use_shim']) {
        drupal_add_js($shim_settings['external_location'], array(
          'type' => 'external',
          'scope' => 'footer',
          'group' => JS_THEME,
          'every_page' => TRUE,
          'weight' => 11,
        ));
      }
    }
  }
  // Loading local library.
  else {
    $library = libraries_load(FONTAWESOME_LIBRARY . '_' . $method);
    if (!$library['loaded']) {
      drupal_set_message($library['error message'] . ' ' . t('Please make sure that Font Awesome was downloaded and extracted in the sites/all/libraries/fontawesome directory. Please check README.txt for more details.'), 'warning');
    }
    // Handle backwards compatibility shim file.
    if ($method == 'svg' && $shim_settings['use_shim']) {
      $library = libraries_load(FONTAWESOME_LIBRARY . '_shim');
      if (!$library['loaded']) {
        drupal_set_message($library['error message'] . ' ' . t('Please make sure that Font Awesome was downloaded and extracted in the sites/all/libraries/fontawesome directory. Please check README.txt for more details.'), 'warning');
      }
    }
  }
}

/**
 * Implements hook_icon_providers().
 */
function fontawesome_icon_providers() {
  $providers[FONTAWESOME_LIBRARY] = array(
    'title' => FONTAWESOME_NAME,
    'url' => FONTAWESOME_URL,
  );
  return $providers;
}

/**
 * Implements hook_icon_bundle_configure().
 */
function fontawesome_icon_bundle_configure(&$settings, &$form_state, &$complete_form) {
  $bundle = $form_state['bundle'];
  if ($bundle['provider'] === FONTAWESOME_LIBRARY) {
    $settings['tag'] = array(
      '#type' => 'select',
      '#title' => t('HTML Markup'),
      '#description' => t('Choose the HTML markup tag that @fontawesome icons should be created with. Typically, this is a %tag tag, however it can be changed to suite the theme requirements.', array(
        '@fontawesome' => FONTAWESOME_NAME,
        '%tag' => '<' . $bundle['settings']['tag'] . '>',
      )),
      '#options' => drupal_map_assoc(array('i', 'span', 'div')),
      '#default_value' => $bundle['settings']['tag'],
    );
  }
}

/**
 * Implements hook_preprocess_icon_RENDER_HOOK().
 */
function fontawesome_preprocess_icon_sprite(&$variables) {
  $bundle = &$variables['bundle'];
  if ($bundle['provider'] === FONTAWESOME_LIBRARY) {
    // Remove the default "icon" class.
    $key = array_search('icon', $variables['attributes']['class']);
    if ($key !== FALSE) {
      unset($variables['attributes']['class'][$key]);
    }

    // Add the necessary FA identifier class.
    $variables['attributes']['class'][] = FONTAWESOME_PREFIX;

    // Prepend the icon with the FA prefix (which will be used as the class).
    $variables['icon'] = FONTAWESOME_PREFIX . '-' . $variables['icon'];
  }
}

/**
 * Implements hook_icon_bundles().
 */
function fontawesome_icon_bundles() {
  $bundles[FONTAWESOME_LIBRARY] = array(
    'title' => FONTAWESOME_NAME,
    'provider' => FONTAWESOME_LIBRARY,
    'render' => 'sprite',
    'settings' => array(
      'tag' => 'i',
    ),
    'icons' => fontawesome_extract_icons(),
  );
  return $bundles;
}

/**
 * Loads the Font Awesome metadata file.
 *
 * @return string
 *   The filepath of the metadata file.
 */
function fontawesome_get_metadata_filepath() {
  // Load the library so we can get the path.
  $library = libraries_load(FONTAWESOME_LIBRARY . '_svg');

  // Attempt to load the icons from the local library's metadata if possible.
  $metadataFile = drupal_realpath($library['library path'] . '/advanced-options/metadata/icons.json');
  // If we can't load the local file, use the included module icons file.
  if (!file_exists($metadataFile)) {
    $metadataFile = drupal_get_path('module', 'fontawesome') . '/metadata/icons.json';
  }
  return $metadataFile;
}

/**
 * Provides a list of all available Font Awesome icons from metadata.
 *
 * @return array
 *   Array containing icons.
 */
function fontawesome_extract_icons() {
  $icons = array();

  // Get the contents of the YAML file.
  $content = file_get_contents(fontawesome_get_metadata_filepath());

  // Parse the icons metadata.
  foreach (json_decode($content) as $name => $icon) {
    // Determine the icon type - brands behave differently.
    $type = 'solid';
    foreach ($icon->styles as $style) {
      if ($style == 'brands') {
        $type = 'brands';
        break;
      }
    }
    $icons[$name] = [
      'name' => $name,
      'type' => $type,
      'label' => $icon->label,
      'styles' => $icon->styles,
    ];
  }

  return $icons;
}
